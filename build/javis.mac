# Create a scene handler/viewer for a specific graphics system
#    The compound command "/vis/open <vis-driver-name>"
#    is equivalent to the following set of commands:
#
#    /vis/sceneHandler/create
#    /vis/viewer/create
#
# Create a scene handler and a viewer for the OGLIX driver
#
/vis/open OGL 600x600-0+0
#
# Disable auto refresh and quieten vis messages whilst scene and
# trajectories are established:
#
/vis/viewer/set/autoRefresh false
/vis/verbose errors
#
#
/vis/viewer/set/style wireframe
# Set direction from target to camera.
/vis/viewer/set/viewpointVector -1 0 0
/vis/viewer/set/lightsVector -1 0 0
#/vis/viewer/set/viewpointThetaPhi 90 180 deg
#/vis/viewer/zoom 1.4
#
#    The compound command "/vis/drawVolume"
#    is equivalent to the following set of commands:
#
#    /vis/scene/create
#    /vis/scene/add/volume
#    /vis/sceneHandler/attach
# Create an empty scene and add the detector geometry to it
/vis/drawVolume
#
# Store particle trajectories for visualization
# (if too many tracks cause core dump => storeTrajectory 0)
#
/tracking/storeTrajectory 1
#
# Add trajectories to the current scene
# Note: This command is not necessary since the C++ method DrawTrajectory()
#       is called in LXeEventAction::EndOfEventAction
#
/vis/scene/add/trajectories
#
# Requests viewer to accumulate hits, tracks, etc. at end of event. 
# detector remains or is redrawn.
#
# For example, to select colour by particle ID:
/vis/scene/add/trajectories smooth
/vis/modeling/trajectories/create/drawByParticleID
#/vis/modeling/trajectories/drawByParticleID-0/default/setDrawStepPts true
# To select or override default colours (note: e+ is blue by default):
#/vis/modeling/trajectories/list
#/vis/modeling/trajectories/drawByParticleID-0/set e+ yellow
#
/vis/scene/endOfEventAction accumulate
#
#Decoration
#s
/vis/scene/add/scale   # Simple scale line
/vis/scene/add/axes    # Simple axes: x=red, y=green, z=blue.
#
# Re-establish auto refreshing and verbosity:
#
/vis/viewer/set/autoRefresh true
/vis/verbose warnings


